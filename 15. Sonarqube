
note sonar docker container id-d0fd6a48b98a

1.cat /etc/os-release
2.for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
3.# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

4.sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
5.sudo docker pull sonarqube
6.sudo docker run -d --name sonarqube -p 9000:9000 sonarqube
7.sudo docker ps


Note:
==================
ubuntu@ip-172-31-82-162:~$ sudo docker run -d --name sonarqube -p 9000:9000 sonarqube
5aab951978b7769aaba0c7a32f42d34191bdd0ab0ee97f698e4dd9485d792c8c
ubuntu@ip-172-31-82-162:~$ sudo docker ps
CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS         PORTS                                       NAMES
4d5cb5e777d9   sonarqube   "/opt/sonarqube/dock…"   6 seconds ago   Up 4 seconds   0.0.0.0:9000->9000/tcp, :::9000->9000/tcp   sonarqube
ubuntu@ip-172-31-82-162:~$ sudo docker images
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
sonarqube    latest    6bada21f1230   4 weeks ago   1.12GB
ubuntu@ip-172-31-82-162:~$ sudo systemctl enable docker
Synchronizing state of docker.service with SysV service script with /usr/lib/systemd/systemd-sysv-install.
Executing: /usr/lib/systemd/systemd-sysv-install enable docker

===============
8. Option(when u have seperate database)
sudo docker exec -it 9b4 /bin/bash
sonarqube@9b428fbf7cd7:/opt/sonarqube$ ls
bin   COPYING  dependency-license.json	elasticsearch  jres  logs  web
conf  data     docker			extensions     lib   temp
sonarqube@9b428fbf7cd7:/opt/sonarqube$ cd conf
sonarqube@9b428fbf7cd7:/opt/sonarqube/conf$ ls
sonar.properties
sonarqube@9b428fbf7cd7:/opt/sonarqube/conf$ exit
exit

9.

dern software development workflows, ensuring code quality is paramount. SonarQube and Jenkins are two powerful tools that, when integrated, can help achieve this goal efficiently. In this guide, we’ll walk through the process of setting up SonarQube using Docker, configuring it in Jenkins UI, and integrating it into a Jenkins pipeline job to scan code before building.

Prerequisites:
Installed Docker
Installed Jenkins
Basic familiarity with Docker and Jenkins
Step 1: Setting Up SonarQube
Using Docker First, let’s pull the SonarQube Docker image and run it.

docker pull sonarqube
docker run -d --name sonarqube -p 9000:9000 sonarqube
Access SonarQube UI by navigating to http://your-IP-address:9000 in your web browser. Follow the setup wizard to create an admin account.

Default login credentials are admin/admin.

Step 2: Generate SonarQube Token
2.1. Log in to SonarQube using the admin credentials.

2.2. Navigate to “My Account” -> “Security” -> “Generate Tokens”.

2.3. Provide a name for the token and click on “Generate”. Save the generated token securely.

To set up SonarQube credentials in Jenkins:

Go to “Manage Jenkins” > “Manage Credentials”.
Choose the appropriate domain.
Click “Add Credentials”.
Select the credential type (e.g., “Secret text” for tokens, “Username with password” for username/password).
Enter the credential details.
Provide an ID and description.
Save the credentials.
Step 3: Create a New Project:
Once logged in, you need to create a new project in SonarQube. Follow these steps:

Click on the “Projects” tab on the top menu.
Click on the “Create Project” button.
Provide a unique project key and a display name for your project.
Choose the appropriate language for your project. SonarQube supports various programming languages.
Click on “Set Up” to proceed.
Configure Analysis Settings: After setting up the project, you’ll be prompted to configure the analysis settings. This involves configuring how SonarQube will analyze your code.

Step 4: Configuring SonarQube Properties:
It can offer benefits in terms of organization, consistency, and ease of maintenance, especially for projects with specific configuration needs

Create a sonar-project.properties file in your project directory.
Add necessary properties, e.g.,
sonar.projectKey=lil_sonar_project
Step 5: Installing SonarQube Scanner in Jenkins
Open Jenkins dashboard and navigate to Manage Jenkins > Global Tool Configuration.
Scroll down to the SonarQube Scanner section.
Click on Add SonarQube Scanner and provide a name for the installation.
Specify the path to the SonarQube scanner installation directory.
Save the configuration.

Step 6: Install SonarQube Plugin
To run your project analyses with Jenkins, the following plugins must be installed and configured:

SonarQube Scanner plugin for Jenkins — version 2.11 or later
Navigate to Jenkins Dashboard -> “Manage Jenkins” -> “Manage Plugins”.

Go to the “Available” tab, search for “SonarQube Scanner” plugin, and install it.

Step 7: Configure SonarQube in Jenkins
Navigate to Jenkins Dashboard -> “Manage Jenkins” -> “Configure System”.
Scroll down to the “SonarQube servers” section and click on “Add SonarQube”.
Provide a name for the SonarQube server.
Enter the SonarQube server URL (http://IP_SonarQube:9000).
Paste the SonarQube token generated in Step 2.
Save the configuration.

Step 8: Integrate SonarQube into Jenkins Pipeline
Open or create a Jenkinsfile in your project.

Define the SonarQube scanner configuration within the pipeline script:

pipeline {
    agent any 
    
    stages { 
        stage('SCM Checkout') {
            steps{
           git branch: 'main', url: 'https://github.com/lily4499/lil-node-app.git'
            }
        }
        // run sonarqube test
        stage('Run Sonarqube') {
            environment {
                scannerHome = tool 'lil-sonar-tool';
            }
            steps {
              withSonarQubeEnv(credentialsId: 'lil-sonar-credentials', installationName: 'lil sonar installation') {
                sh "${scannerHome}/bin/sonar-scanner"
              }
            }
        }
    }
}
Make sure to replace SonarQube Tool, Installation and Credentials with the names you gave to your configurations in Jenkins.

Step 9: Checking SonarQube Configuration:
Run the Jenkins pipeline job.
Once the SonarQube stage executes, check the SonarQube dashboard (http://localhost:9000) for the analysis report.
Verify that the code quality metrics are populated correctly.



TRIVY:(Need to install in docker/build server)
---------

1.sudo apt-get install wget apt-transport-https gnupg lsb-release
wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.listsudo apt-get updatesudo apt-get install trivy

2.sudo snap install trivy
3.trivy image akhilpagadapoola/react-nginx
4.trivy image --severity HIGH,CRITICAL akhilpagadapoola/react-nginx
5.trivy image --format json --output report.json akhilpagadapoola/react-nginx
