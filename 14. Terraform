main

data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}

resource "aws_instance" "web" {
  ami           = data.aws_ami.ubuntu.id
  instance_type = "t2.micro"

  tags = {
    Name = "HelloWorld"
  }
}

resource "aws_instance" "demo" {
  ami           = "ami-0a21b6ec028435788"
  instance_type = "t2.micro"

  tags = {
    Name = "import_ec2"
  }
}



# module "s3_bucket" {
#   source      = "github.com/akhilgit19/module-s3-bucket1"
#   bucket_name = "tbucket8179332273"

# }




Provider



provider "aws" {
  access_key = "AKIA2UC3CLIJ5P3FPTMIvvvv"
  secret_key = "Rj4behiNO4sAKBA/qEUmgtTXqjoXP4nqY8CFD84Ovvvvv"
  region     = "us-east-1"
}



output



output "web_id" {
  description = "this is test ID"
  value       = aws_instance.web.id

}

output "demo_id" {
  description = "this is test ID"
  value       = aws_instance.demo.id

}



Log:


      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.
aws_instance.web: Creating...
aws_instance.web: Still creating... [10s elapsed]
aws_instance.web: Creation complete after 16s [id=i-03ce10a98fb4c2577]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
akhilpagadapoola@Akhils-MacBook-Air terraform % terraform import aws_instance.demo i-0ac91b1528da44288
Error: resource address "aws_instance.demo" does not exist in the configuration.

Before importing this resource, please create its configuration in the root module. For example:

resource "aws_instance" "demo" {
  # (resource arguments)
}

akhilpagadapoola@Akhils-MacBook-Air terraform % terraform import aws_instance.demo i-0ac91b1528da44288
data.aws_ami.ubuntu: Reading...
data.aws_ami.ubuntu: Read complete after 1s [id=ami-0a21b6ec028435788]
aws_instance.demo: Importing from ID "i-0ac91b1528da44288"...
aws_instance.demo: Import prepared!
  Prepared aws_instance for import
aws_instance.demo: Refreshing state... [id=i-0ac91b1528da44288]

Import successful!

The resources that were imported are shown above. These resources are now in
your Terraform state and will henceforth be managed by Terraform.

akhilpagadapoola@Akhils-MacBook-Air terraform % terraform destory 
Terraform has no command named "destory". Did you mean "destroy"?

To see all of Terraform's top-level commands, run:
  terraform -help

akhilpagadapoola@Akhils-MacBook-Air terraform % terraform destroy
data.aws_ami.ubuntu: Reading...
module.s3_bucket.aws_s3_bucket.main: Refreshing state... [id=tbucket8179332273]
data.aws_ami.ubuntu: Read complete after 1s [id=ami-0a21b6ec028435788]
aws_instance.demo: Refreshing state... [id=i-0ac91b1528da44288]
aws_instance.web: Refreshing state... [id=i-03ce10a98fb4c2577]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_instance.demo will be destroyed
  - resource "aws_instance" "demo" {
      - ami                                  = "ami-0e86e20dae9224db8" -> null
      - arn                                  = "arn:aws:ec2:us-east-1:730335435283:instance/i-0ac91b1528da44288" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "us-east-1c" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-0ac91b1528da44288" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - key_name                             = "Jenkins" -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-00324ffdfcf6ebc6d" -> null
      - private_dns                          = "ip-172-31-80-218.ec2.internal" -> null
      - private_ip                           = "172.31.80.218" -> null
      - public_dns                           = "ec2-54-167-133-112.compute-1.amazonaws.com" -> null
      - public_ip                            = "54.167.133.112" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [
          - "react-nginx-sercurity group",
        ] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-0cb9cae8de7d81f67" -> null
      - tags                                 = {
          - "Name" = "import_ec2"
        } -> null
      - tags_all                             = {
          - "Name" = "import_ec2"
        } -> null
      - tenancy                              = "default" -> null
      - vpc_security_group_ids               = [
          - "sg-09bb0d212d735fa60",
        ] -> null
        # (7 unchanged attributes hidden)

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - cpu_options {
          - core_count       = 1 -> null
          - threads_per_core = 1 -> null
            # (1 unchanged attribute hidden)
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_protocol_ipv6          = "disabled" -> null
          - http_put_response_hop_limit = 2 -> null
          - http_tokens                 = "required" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = true -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/sda1" -> null
          - encrypted             = false -> null
          - iops                  = 3000 -> null
          - tags                  = {} -> null
          - tags_all              = {} -> null
          - throughput            = 125 -> null
          - volume_id             = "vol-05bbca67b6c819d4d" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp3" -> null
            # (1 unchanged attribute hidden)
        }
    }

  # aws_instance.web will be destroyed
  - resource "aws_instance" "web" {
      - ami                                  = "ami-0a21b6ec028435788" -> null
      - arn                                  = "arn:aws:ec2:us-east-1:730335435283:instance/i-03ce10a98fb4c2577" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "us-east-1c" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-03ce10a98fb4c2577" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-0749ff523df61658c" -> null
      - private_dns                          = "ip-172-31-80-83.ec2.internal" -> null
      - private_ip                           = "172.31.80.83" -> null
      - public_dns                           = "ec2-18-204-210-152.compute-1.amazonaws.com" -> null
      - public_ip                            = "18.204.210.152" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [
          - "default",
        ] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-0cb9cae8de7d81f67" -> null
      - tags                                 = {
          - "Name" = "HelloWorld"
        } -> null
      - tags_all                             = {
          - "Name" = "HelloWorld"
        } -> null
      - tenancy                              = "default" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-05402ee7f59029c48",
        ] -> null
        # (8 unchanged attributes hidden)

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - cpu_options {
          - core_count       = 1 -> null
          - threads_per_core = 1 -> null
            # (1 unchanged attribute hidden)
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_protocol_ipv6          = "disabled" -> null
          - http_put_response_hop_limit = 1 -> null
          - http_tokens                 = "optional" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/sda1" -> null
          - encrypted             = false -> null
          - iops                  = 100 -> null
          - tags                  = {} -> null
          - tags_all              = {} -> null
          - throughput            = 0 -> null
          - volume_id             = "vol-051a2f10242b9b6e9" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp2" -> null
            # (1 unchanged attribute hidden)
        }
    }

  # module.s3_bucket.aws_s3_bucket.main will be destroyed
  - resource "aws_s3_bucket" "main" {
      - arn                         = "arn:aws:s3:::tbucket8179332273" -> null
      - bucket                      = "tbucket8179332273" -> null
      - bucket_domain_name          = "tbucket8179332273.s3.amazonaws.com" -> null
      - bucket_regional_domain_name = "tbucket8179332273.s3.us-east-1.amazonaws.com" -> null
      - force_destroy               = false -> null
      - hosted_zone_id              = "Z3AQBSTGFYJSTF" -> null
      - id                          = "tbucket8179332273" -> null
      - object_lock_enabled         = false -> null
      - region                      = "us-east-1" -> null
      - request_payer               = "BucketOwner" -> null
      - tags                        = {
          - "Name" = "created bucket"
        } -> null
      - tags_all                    = {
          - "Name" = "created bucket"
        } -> null
        # (3 unchanged attributes hidden)

      - grant {
          - id          = "08c73bafe9a656ce0ee6e4d37d54f104c273380e1a08d05d59f09a4517d56e08" -> null
          - permissions = [
              - "FULL_CONTROL",
            ] -> null
          - type        = "CanonicalUser" -> null
            # (1 unchanged attribute hidden)
        }

      - server_side_encryption_configuration {
          - rule {
              - bucket_key_enabled = false -> null

              - apply_server_side_encryption_by_default {
                  - sse_algorithm     = "AES256" -> null
                    # (1 unchanged attribute hidden)
                }
            }
        }

      - versioning {
          - enabled    = false -> null
          - mfa_delete = false -> null
        }
    }

Plan: 0 to add, 0 to change, 3 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

module.s3_bucket.aws_s3_bucket.main: Destroying... [id=tbucket8179332273]
aws_instance.demo: Destroying... [id=i-0ac91b1528da44288]
aws_instance.web: Destroying... [id=i-03ce10a98fb4c2577]
module.s3_bucket.aws_s3_bucket.main: Destruction complete after 1s
aws_instance.web: Still destroying... [id=i-03ce10a98fb4c2577, 10s elapsed]
aws_instance.demo: Still destroying... [id=i-0ac91b1528da44288, 10s elapsed]
aws_instance.web: Still destroying... [id=i-03ce10a98fb4c2577, 20s elapsed]
aws_instance.demo: Still destroying... [id=i-0ac91b1528da44288, 20s elapsed]
aws_instance.web: Still destroying... [id=i-03ce10a98fb4c2577, 30s elapsed]
aws_instance.demo: Still destroying... [id=i-0ac91b1528da44288, 30s elapsed]
aws_instance.web: Still destroying... [id=i-03ce10a98fb4c2577, 40s elapsed]
aws_instance.demo: Still destroying... [id=i-0ac91b1528da44288, 40s elapsed]
aws_instance.web: Still destroying... [id=i-03ce10a98fb4c2577, 50s elapsed]
aws_instance.demo: Still destroying... [id=i-0ac91b1528da44288, 50s elapsed]
aws_instance.demo: Still destroying... [id=i-0ac91b1528da44288, 1m0s elapsed]
aws_instance.web: Still destroying... [id=i-03ce10a98fb4c2577, 1m0s elapsed]
aws_instance.web: Still destroying... [id=i-03ce10a98fb4c2577, 1m10s elapsed]
aws_instance.demo: Still destroying... [id=i-0ac91b1528da44288, 1m10s elapsed]
aws_instance.demo: Destruction complete after 1m13s
aws_instance.web: Still destroying... [id=i-03ce10a98fb4c2577, 1m20s elapsed]
aws_instance.web: Destruction complete after 1m23s

Destroy complete! Resources: 3 destroyed.
akhilpagadapoola@Akhils-MacBook-Air terraform % terraform init
Initializing the backend...
Initializing modules...
Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.67.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
akhilpagadapoola@Akhils-MacBook-Air terraform % terraform apply --auto-approve 
data.aws_ami.ubuntu: Reading...
data.aws_ami.ubuntu: Read complete after 2s [id=ami-0a21b6ec028435788]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.demo will be created
  + resource "aws_instance" "demo" {
      + ami                                  = "ami-0a21b6ec028435788"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "import_ec2"
        }
      + tags_all                             = {
          + "Name" = "import_ec2"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_instance.web will be created
  + resource "aws_instance" "web" {
      + ami                                  = "ami-0a21b6ec028435788"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "HelloWorld"
        }
      + tags_all                             = {
          + "Name" = "HelloWorld"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # module.s3_bucket.aws_s3_bucket.main will be created
  + resource "aws_s3_bucket" "main" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "tbucket8179332273"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Name" = "created bucket"
        }
      + tags_all                    = {
          + "Name" = "created bucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

Plan: 3 to add, 0 to change, 0 to destroy.
module.s3_bucket.aws_s3_bucket.main: Creating...
aws_instance.demo: Creating...
aws_instance.web: Creating...
module.s3_bucket.aws_s3_bucket.main: Creation complete after 5s [id=tbucket8179332273]
aws_instance.demo: Still creating... [10s elapsed]
aws_instance.web: Still creating... [10s elapsed]
aws_instance.demo: Creation complete after 16s [id=i-0636ef0b9daf43b4e]
aws_instance.web: Still creating... [20s elapsed]
aws_instance.web: Still creating... [30s elapsed]
aws_instance.web: Still creating... [40s elapsed]
aws_instance.web: Creation complete after 46s [id=i-0c5f2ffe8a5b3d09e]

Apply complete! Resources: 3 added, 0 changed, 0 destroyed.
akhilpagadapoola@Akhils-MacBook-Air terraform % terraform state show aws_instance.demo
# aws_instance.demo:
resource "aws_instance" "demo" {
    ami                                  = "ami-0a21b6ec028435788"
    arn                                  = "arn:aws:ec2:us-east-1:730335435283:instance/i-0636ef0b9daf43b4e"
    associate_public_ip_address          = true
    availability_zone                    = "us-east-1c"
    cpu_core_count                       = 1
    cpu_threads_per_core                 = 1
    disable_api_stop                     = false
    disable_api_termination              = false
    ebs_optimized                        = false
    get_password_data                    = false
    hibernation                          = false
    host_id                              = null
    iam_instance_profile                 = null
    id                                   = "i-0636ef0b9daf43b4e"
    instance_initiated_shutdown_behavior = "stop"
    instance_lifecycle                   = null
    instance_state                       = "running"
    instance_type                        = "t2.micro"
    ipv6_address_count                   = 0
    ipv6_addresses                       = []
    key_name                             = null
    monitoring                           = false
    outpost_arn                          = null
    password_data                        = null
    placement_group                      = null
    placement_partition_number           = 0
    primary_network_interface_id         = "eni-0ba41f1e439c51364"
    private_dns                          = "ip-172-31-86-50.ec2.internal"
    private_ip                           = "172.31.86.50"
    public_dns                           = "ec2-44-201-174-78.compute-1.amazonaws.com"
    public_ip                            = "44.201.174.78"
    secondary_private_ips                = []
    security_groups                      = [
        "default",
    ]
    source_dest_check                    = true
    spot_instance_request_id             = null
    subnet_id                            = "subnet-0cb9cae8de7d81f67"
    tags                                 = {
        "Name" = "import_ec2"
    }
    tags_all                             = {
        "Name" = "import_ec2"
    }
    tenancy                              = "default"
    user_data_replace_on_change          = false
    vpc_security_group_ids               = [
        "sg-05402ee7f59029c48",
    ]

    capacity_reservation_specification {
        capacity_reservation_preference = "open"
    }

    cpu_options {
        amd_sev_snp      = null
        core_count       = 1
        threads_per_core = 1
    }

    credit_specification {
        cpu_credits = "standard"
    }

    enclave_options {
        enabled = false
    }

    maintenance_options {
        auto_recovery = "default"
    }

    metadata_options {
        http_endpoint               = "enabled"
        http_protocol_ipv6          = "disabled"
        http_put_response_hop_limit = 1
        http_tokens                 = "optional"
        instance_metadata_tags      = "disabled"
    }

    private_dns_name_options {
        enable_resource_name_dns_a_record    = false
        enable_resource_name_dns_aaaa_record = false
        hostname_type                        = "ip-name"
    }

    root_block_device {
        delete_on_termination = true
        device_name           = "/dev/sda1"
        encrypted             = false
        iops                  = 100
        kms_key_id            = null
        tags                  = {}
        tags_all              = {}
        throughput            = 0
        volume_id             = "vol-0df2502ee17ab9253"
        volume_size           = 8
        volume_type           = "gp2"
    }
}
akhilpagadapoola@Akhils-MacBook-Air terraform % terraform init
Initializing the backend...
Initializing modules...
Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.67.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
akhilpagadapoola@Akhils-MacBook-Air terraform % terraform apply --auto-approve
╷
│ Error: Invalid reference
│ 
│   on main.tf line 27, in resource "aws_instance" "demo":
│   27:   ami           = ami-0a21b6ec028435788
│ 
│ A reference to a resource type must be followed by at least one attribute access, specifying the resource name.
╵
akhilpagadapoola@Akhils-MacBook-Air terraform % terraform validate
╷
│ Error: Invalid reference
│ 
│   on main.tf line 27, in resource "aws_instance" "demo":
│   27:   ami           = ami-0a21b6ec028435788
│ 
│ A reference to a resource type must be followed by at least one attribute access, specifying the resource name.
╵
akhilpagadapoola@Akhils-MacBook-Air terraform % terraform init                
Initializing the backend...
Initializing modules...
Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.67.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
akhilpagadapoola@Akhils-MacBook-Air terraform % terraform apply --auto-approve
╷
│ Error: Invalid reference
│ 
│   on main.tf line 27, in resource "aws_instance" "demo":
│   27:   ami           = ami-0a21b6ec028435788
│ 
│ A reference to a resource type must be followed by at least one attribute access, specifying the resource name.
╵
akhilpagadapoola@Akhils-MacBook-Air terraform % terraform apply --auto-approve
data.aws_ami.ubuntu: Reading...
module.s3_bucket.aws_s3_bucket.main: Refreshing state... [id=tbucket8179332273]
aws_instance.demo: Refreshing state... [id=i-0636ef0b9daf43b4e]
data.aws_ami.ubuntu: Read complete after 1s [id=ami-0a21b6ec028435788]
aws_instance.web: Refreshing state... [id=i-0c5f2ffe8a5b3d09e]

Changes to Outputs:
  + demo_id = "i-0636ef0b9daf43b4e"
  + web_id  = "i-0c5f2ffe8a5b3d09e"

You can apply this plan to save these new output values to the Terraform state, without changing any real
infrastructure.

Apply complete! Resources: 0 added, 0 changed, 0 destroyed.

Outputs:

demo_id = "i-0636ef0b9daf43b4e"
web_id = "i-0c5f2ffe8a5b3d09e"
akhilpagadapoola@Akhils-MacBook-Air terraform % terraform destroy
data.aws_ami.ubuntu: Reading...
aws_instance.demo: Refreshing state... [id=i-0636ef0b9daf43b4e]
module.s3_bucket.aws_s3_bucket.main: Refreshing state... [id=tbucket8179332273]
data.aws_ami.ubuntu: Read complete after 2s [id=ami-0a21b6ec028435788]
aws_instance.web: Refreshing state... [id=i-0c5f2ffe8a5b3d09e]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_instance.demo will be destroyed
  - resource "aws_instance" "demo" {
      - ami                                  = "ami-0a21b6ec028435788" -> null
      - arn                                  = "arn:aws:ec2:us-east-1:730335435283:instance/i-0636ef0b9daf43b4e" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "us-east-1c" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-0636ef0b9daf43b4e" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-0ba41f1e439c51364" -> null
      - private_dns                          = "ip-172-31-86-50.ec2.internal" -> null
      - private_ip                           = "172.31.86.50" -> null
      - public_dns                           = "ec2-44-201-174-78.compute-1.amazonaws.com" -> null
      - public_ip                            = "44.201.174.78" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [
          - "default",
        ] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-0cb9cae8de7d81f67" -> null
      - tags                                 = {
          - "Name" = "import_ec2"
        } -> null
      - tags_all                             = {
          - "Name" = "import_ec2"
        } -> null
      - tenancy                              = "default" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-05402ee7f59029c48",
        ] -> null
        # (8 unchanged attributes hidden)

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - cpu_options {
          - core_count       = 1 -> null
          - threads_per_core = 1 -> null
            # (1 unchanged attribute hidden)
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_protocol_ipv6          = "disabled" -> null
          - http_put_response_hop_limit = 1 -> null
          - http_tokens                 = "optional" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/sda1" -> null
          - encrypted             = false -> null
          - iops                  = 100 -> null
          - tags                  = {} -> null
          - tags_all              = {} -> null
          - throughput            = 0 -> null
          - volume_id             = "vol-0df2502ee17ab9253" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp2" -> null
            # (1 unchanged attribute hidden)
        }
    }

  # aws_instance.web will be destroyed
  - resource "aws_instance" "web" {
      - ami                                  = "ami-0a21b6ec028435788" -> null
      - arn                                  = "arn:aws:ec2:us-east-1:730335435283:instance/i-0c5f2ffe8a5b3d09e" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "us-east-1c" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-0c5f2ffe8a5b3d09e" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-0d56ba7ffd5180aa5" -> null
      - private_dns                          = "ip-172-31-91-53.ec2.internal" -> null
      - private_ip                           = "172.31.91.53" -> null
      - public_dns                           = "ec2-54-204-127-156.compute-1.amazonaws.com" -> null
      - public_ip                            = "54.204.127.156" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [
          - "default",
        ] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-0cb9cae8de7d81f67" -> null
      - tags                                 = {
          - "Name" = "HelloWorld"
        } -> null
      - tags_all                             = {
          - "Name" = "HelloWorld"
        } -> null
      - tenancy                              = "default" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-05402ee7f59029c48",
        ] -> null
        # (8 unchanged attributes hidden)

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - cpu_options {
          - core_count       = 1 -> null
          - threads_per_core = 1 -> null
            # (1 unchanged attribute hidden)
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_protocol_ipv6          = "disabled" -> null
          - http_put_response_hop_limit = 1 -> null
          - http_tokens                 = "optional" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/sda1" -> null
          - encrypted             = false -> null
          - iops                  = 100 -> null
          - tags                  = {} -> null
          - tags_all              = {} -> null
          - throughput            = 0 -> null
          - volume_id             = "vol-00ad97dacbac70eec" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp2" -> null
            # (1 unchanged attribute hidden)
        }
    }

  # module.s3_bucket.aws_s3_bucket.main will be destroyed
  - resource "aws_s3_bucket" "main" {
      - arn                         = "arn:aws:s3:::tbucket8179332273" -> null
      - bucket                      = "tbucket8179332273" -> null
      - bucket_domain_name          = "tbucket8179332273.s3.amazonaws.com" -> null
      - bucket_regional_domain_name = "tbucket8179332273.s3.us-east-1.amazonaws.com" -> null
      - force_destroy               = false -> null
      - hosted_zone_id              = "Z3AQBSTGFYJSTF" -> null
      - id                          = "tbucket8179332273" -> null
      - object_lock_enabled         = false -> null
      - region                      = "us-east-1" -> null
      - request_payer               = "BucketOwner" -> null
      - tags                        = {
          - "Name" = "created bucket"
        } -> null
      - tags_all                    = {
          - "Name" = "created bucket"
        } -> null
        # (3 unchanged attributes hidden)

      - grant {
          - id          = "08c73bafe9a656ce0ee6e4d37d54f104c273380e1a08d05d59f09a4517d56e08" -> null
          - permissions = [
              - "FULL_CONTROL",
            ] -> null
          - type        = "CanonicalUser" -> null
            # (1 unchanged attribute hidden)
        }

      - server_side_encryption_configuration {
          - rule {
              - bucket_key_enabled = false -> null

              - apply_server_side_encryption_by_default {
                  - sse_algorithm     = "AES256" -> null
                    # (1 unchanged attribute hidden)
                }
            }
        }

      - versioning {
          - enabled    = false -> null
          - mfa_delete = false -> null
        }
    }

Plan: 0 to add, 0 to change, 3 to destroy.

Changes to Outputs:
  - demo_id = "i-0636ef0b9daf43b4e" -> null
  - web_id  = "i-0c5f2ffe8a5b3d09e" -> null

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

module.s3_bucket.aws_s3_bucket.main: Destroying... [id=tbucket8179332273]
aws_instance.web: Destroying... [id=i-0c5f2ffe8a5b3d09e]
aws_instance.demo: Destroying... [id=i-0636ef0b9daf43b4e]
module.s3_bucket.aws_s3_bucket.main: Destruction complete after 1s
aws_instance.demo: Still destroying... [id=i-0636ef0b9daf43b4e, 10s elapsed]
aws_instance.web: Still destroying... [id=i-0c5f2ffe8a5b3d09e, 10s elapsed]
aws_instance.demo: Still destroying... [id=i-0636ef0b9daf43b4e, 20s elapsed]
aws_instance.web: Still destroying... [id=i-0c5f2ffe8a5b3d09e, 20s elapsed]
aws_instance.web: Still destroying... [id=i-0c5f2ffe8a5b3d09e, 30s elapsed]
aws_instance.demo: Still destroying... [id=i-0636ef0b9daf43b4e, 30s elapsed]
aws_instance.demo: Destruction complete after 33s
aws_instance.web: Still destroying... [id=i-0c5f2ffe8a5b3d09e, 40s elapsed]
aws_instance.web: Destruction complete after 43s

Destroy complete! Resources: 3 destroyed.
akhilpagadapoola@Akhils-MacBook-Air terraform % 
