1.cat /etc/os-release
2.for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
3.# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
4.sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

Last login: Fri Aug 30 20:22:46 on ttys002
akhilpagadapoola@Akhils-MacBook-Air Docker_react_nginx_aws_keypair % ssh -i "docker-react-nginx-aws.pem" ubuntu@ec2-34-207-157-230.compute-1.amazonaws.com
The authenticity of host 'ec2-34-207-157-230.compute-1.amazonaws.com (34.207.157.230)' can't be established.
ED25519 key fingerprint is SHA256:eScJIS7/VzgaX51UT9f4ptckYj2/nZtzKCivb140tm0.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added 'ec2-34-207-157-230.compute-1.amazonaws.com' (ED25519) to the list of known hosts.
Welcome to Ubuntu 24.04 LTS (GNU/Linux 6.8.0-1012-aws x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/pro

 System information as of Sat Aug 31 00:30:10 UTC 2024

  System load:  0.0               Temperature:           -273.1 C
  Usage of /:   22.8% of 6.71GB   Processes:             112
  Memory usage: 5%                Users logged in:       0
  Swap usage:   0%                IPv4 address for ens5: 172.31.87.138

Expanded Security Maintenance for Applications is not enabled.

0 updates can be applied immediately.

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


The list of available updates is more than a week old.
To check for new updates run: sudo apt update


The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

To run a command as administrator (user "root"), use "sudo <command>".
See "man sudo_root" for details.

ubuntu@ip-172-31-87-138:~$ cat /etc/os-release
PRETTY_NAME="Ubuntu 24.04 LTS"
NAME="Ubuntu"
VERSION_ID="24.04"
VERSION="24.04 LTS (Noble Numbat)"
VERSION_CODENAME=noble
ID=ubuntu
ID_LIKE=debian
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
UBUNTU_CODENAME=noble
LOGO=ubuntu-logo
ubuntu@ip-172-31-87-138:~$ for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
Package 'docker.io' is not installed, so not removed
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
E: Unable to locate package docker-doc
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
E: Unable to locate package docker-compose
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
E: Unable to locate package docker-compose-v2
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
E: Unable to locate package podman-docker
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
Package 'containerd' is not installed, so not removed
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
Package 'runc' is not installed, so not removed
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
ubuntu@ip-172-31-87-138:~$ # Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
Hit:1 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble InRelease
Get:2 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates InRelease [126 kB]
Get:3 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-backports InRelease [126 kB]
Get:4 http://security.ubuntu.com/ubuntu noble-security InRelease [126 kB]
Get:5 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble/universe amd64 Packages [15.0 MB]
Get:6 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble/universe Translation-en [5982 kB]
Get:7 http://security.ubuntu.com/ubuntu noble-security/main amd64 Packages [323 kB]
Get:8 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble/universe amd64 Components [3871 kB]
Get:9 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble/universe amd64 c-n-f Metadata [301 kB]
Get:10 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble/multiverse amd64 Packages [269 kB]
Get:11 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble/multiverse Translation-en [118 kB]
Get:12 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble/multiverse amd64 Components [35.0 kB]
Get:13 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble/multiverse amd64 c-n-f Metadata [8328 B]
Get:14 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates/main amd64 Packages [469 kB]
Get:15 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates/main Translation-en [117 kB]
Get:16 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates/main amd64 c-n-f Metadata [7768 B]
Get:17 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates/universe amd64 Packages [337 kB]
Get:18 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates/universe Translation-en [142 kB]
Get:19 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates/universe amd64 Components [45.0 kB]
Get:20 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates/universe amd64 c-n-f Metadata [13.7 kB]
Get:21 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates/restricted amd64 Packages [280 kB]
Get:22 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates/restricted Translation-en [54.8 kB]
Get:23 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates/multiverse amd64 Packages [14.1 kB]
Get:24 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates/multiverse Translation-en [3608 B]
Get:25 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates/multiverse amd64 Components [212 B]
Get:26 http://security.ubuntu.com/ubuntu noble-security/main Translation-en [73.1 kB]
Get:27 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates/multiverse amd64 c-n-f Metadata [532 B]
Get:28 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-backports/main amd64 Components [208 B]
Get:29 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-backports/main amd64 c-n-f Metadata [112 B]
Get:30 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-backports/universe amd64 Packages [10.3 kB]
Get:31 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-backports/universe Translation-en [10.5 kB]
Get:32 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-backports/universe amd64 Components [17.6 kB]
Get:33 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-backports/universe amd64 c-n-f Metadata [1016 B]
Get:34 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-backports/restricted amd64 Components [216 B]
Get:35 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-backports/restricted amd64 c-n-f Metadata [116 B]
Get:36 http://security.ubuntu.com/ubuntu noble-security/main amd64 c-n-f Metadata [4220 B]
Get:37 http://security.ubuntu.com/ubuntu noble-security/universe amd64 Packages [252 kB]
Get:38 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-backports/multiverse amd64 Components [212 B]
Get:39 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-backports/multiverse amd64 c-n-f Metadata [116 B]
Get:40 http://security.ubuntu.com/ubuntu noble-security/universe Translation-en [109 kB]
Get:41 http://security.ubuntu.com/ubuntu noble-security/universe amd64 Components [8632 B]
Get:42 http://security.ubuntu.com/ubuntu noble-security/universe amd64 c-n-f Metadata [9756 B]
Get:43 http://security.ubuntu.com/ubuntu noble-security/restricted amd64 Packages [280 kB]
Get:44 http://security.ubuntu.com/ubuntu noble-security/restricted Translation-en [54.8 kB]
Get:45 http://security.ubuntu.com/ubuntu noble-security/multiverse amd64 Packages [10.6 kB]
Get:46 http://security.ubuntu.com/ubuntu noble-security/multiverse Translation-en [2808 B]
Get:47 http://security.ubuntu.com/ubuntu noble-security/multiverse amd64 Components [208 B]
Get:48 http://security.ubuntu.com/ubuntu noble-security/multiverse amd64 c-n-f Metadata [344 B]
Fetched 28.7 MB in 6s (4951 kB/s)                              
Reading package lists... Done
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
ca-certificates is already the newest version (20240203).
ca-certificates set to manually installed.
The following additional packages will be installed:
  libcurl3t64-gnutls libcurl4t64
The following packages will be upgraded:
  curl libcurl3t64-gnutls libcurl4t64
3 upgraded, 0 newly installed, 0 to remove and 102 not upgraded.
Need to get 900 kB of archives.
After this operation, 3072 B of additional disk space will be used.
Do you want to continue? [Y/n] y
Get:1 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates/main amd64 curl amd64 8.5.0-2ubuntu10.3 [227 kB]
Get:2 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates/main amd64 libcurl4t64 amd64 8.5.0-2ubuntu10.3 [341 kB]
Get:3 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates/main amd64 libcurl3t64-gnutls amd64 8.5.0-2ubuntu10.3 [333 kB]
Fetched 900 kB in 0s (22.0 MB/s)             
(Reading database ... 67741 files and directories currently installed.)
Preparing to unpack .../curl_8.5.0-2ubuntu10.3_amd64.deb ...
Unpacking curl (8.5.0-2ubuntu10.3) over (8.5.0-2ubuntu10.1) ...
Preparing to unpack .../libcurl4t64_8.5.0-2ubuntu10.3_amd64.deb ...
Unpacking libcurl4t64:amd64 (8.5.0-2ubuntu10.3) over (8.5.0-2ubuntu10.1) ...
Preparing to unpack .../libcurl3t64-gnutls_8.5.0-2ubuntu10.3_amd64.deb ...
Unpacking libcurl3t64-gnutls:amd64 (8.5.0-2ubuntu10.3) over (8.5.0-2ubuntu10.1) ...
Setting up libcurl4t64:amd64 (8.5.0-2ubuntu10.3) ...
Setting up libcurl3t64-gnutls:amd64 (8.5.0-2ubuntu10.3) ...
Setting up curl (8.5.0-2ubuntu10.3) ...
Processing triggers for man-db (2.12.0-4build2) ...
Processing triggers for libc-bin (2.39-0ubuntu8.2) ...
Scanning processes...                                                           
Scanning candidates...                                                          
Scanning linux images...                                                        

Running kernel seems to be up-to-date.

Restarting services...
 systemctl restart packagekit.service

No containers need to be restarted.

No user sessions are running outdated binaries.

No VM guests are running outdated hypervisor (qemu) binaries on this host.
Hit:1 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble InRelease
Hit:2 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates InRelease   
Hit:3 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-backports InRelease 
Hit:4 http://security.ubuntu.com/ubuntu noble-security InRelease               
Get:5 https://download.docker.com/linux/ubuntu noble InRelease [48.8 kB]  
Get:6 https://download.docker.com/linux/ubuntu noble/stable amd64 Packages [13.2 kB]
Fetched 62.1 kB in 1s (93.2 kB/s)     
Reading package lists... Done
ubuntu@ip-172-31-87-138:~$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
The following additional packages will be installed:
  docker-ce-rootless-extras libltdl7 libslirp0 pigz slirp4netns
Suggested packages:
  aufs-tools cgroupfs-mount | cgroup-lite
The following NEW packages will be installed:
  containerd.io docker-buildx-plugin docker-ce docker-ce-cli
  docker-ce-rootless-extras docker-compose-plugin libltdl7 libslirp0 pigz
  slirp4netns
0 upgraded, 10 newly installed, 0 to remove and 102 not upgraded.
Need to get 121 MB of archives.
After this operation, 437 MB of additional disk space will be used.
Do you want to continue? [Y/n] y
Get:1 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble/universe amd64 pigz amd64 2.8-1 [65.6 kB]
Get:2 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble/main amd64 libltdl7 amd64 2.4.7-7build1 [40.3 kB]
Get:3 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble/main amd64 libslirp0 amd64 4.7.0-1ubuntu3 [63.8 kB]
Get:4 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble/universe amd64 slirp4netns amd64 1.2.1-1build2 [34.9 kB]
Get:5 https://download.docker.com/linux/ubuntu noble/stable amd64 containerd.io amd64 1.7.21-1 [29.5 MB]
Get:6 https://download.docker.com/linux/ubuntu noble/stable amd64 docker-buildx-plugin amd64 0.16.2-1~ubuntu.24.04~noble [29.9 MB]
Get:7 https://download.docker.com/linux/ubuntu noble/stable amd64 docker-ce-cli amd64 5:27.2.0-1~ubuntu.24.04~noble [14.8 MB]
Get:8 https://download.docker.com/linux/ubuntu noble/stable amd64 docker-ce amd64 5:27.2.0-1~ubuntu.24.04~noble [25.3 MB]
Get:9 https://download.docker.com/linux/ubuntu noble/stable amd64 docker-ce-rootless-extras amd64 5:27.2.0-1~ubuntu.24.04~noble [9318 kB]
Get:10 https://download.docker.com/linux/ubuntu noble/stable amd64 docker-compose-plugin amd64 2.29.2-1~ubuntu.24.04~noble [12.5 MB]
Fetched 121 MB in 2s (56.5 MB/s)                
Selecting previously unselected package pigz.
(Reading database ... 67741 files and directories currently installed.)
Preparing to unpack .../0-pigz_2.8-1_amd64.deb ...
Unpacking pigz (2.8-1) ...
Selecting previously unselected package containerd.io.
Preparing to unpack .../1-containerd.io_1.7.21-1_amd64.deb ...
Unpacking containerd.io (1.7.21-1) ...
Selecting previously unselected package docker-buildx-plugin.
Preparing to unpack .../2-docker-buildx-plugin_0.16.2-1~ubuntu.24.04~noble_amd64.deb ...
Unpacking docker-buildx-plugin (0.16.2-1~ubuntu.24.04~noble) ...
Selecting previously unselected package docker-ce-cli.
Preparing to unpack .../3-docker-ce-cli_5%3a27.2.0-1~ubuntu.24.04~noble_amd64.deb ...
Unpacking docker-ce-cli (5:27.2.0-1~ubuntu.24.04~noble) ...
Selecting previously unselected package docker-ce.
Preparing to unpack .../4-docker-ce_5%3a27.2.0-1~ubuntu.24.04~noble_amd64.deb ...
Unpacking docker-ce (5:27.2.0-1~ubuntu.24.04~noble) ...
Selecting previously unselected package docker-ce-rootless-extras.
Preparing to unpack .../5-docker-ce-rootless-extras_5%3a27.2.0-1~ubuntu.24.04~noble_amd64.deb ...
Unpacking docker-ce-rootless-extras (5:27.2.0-1~ubuntu.24.04~noble) ...
Selecting previously unselected package docker-compose-plugin.
Preparing to unpack .../6-docker-compose-plugin_2.29.2-1~ubuntu.24.04~noble_amd64.deb ...
Unpacking docker-compose-plugin (2.29.2-1~ubuntu.24.04~noble) ...
Selecting previously unselected package libltdl7:amd64.
Preparing to unpack .../7-libltdl7_2.4.7-7build1_amd64.deb ...
Unpacking libltdl7:amd64 (2.4.7-7build1) ...
Selecting previously unselected package libslirp0:amd64.
Preparing to unpack .../8-libslirp0_4.7.0-1ubuntu3_amd64.deb ...
Unpacking libslirp0:amd64 (4.7.0-1ubuntu3) ...
Selecting previously unselected package slirp4netns.
Preparing to unpack .../9-slirp4netns_1.2.1-1build2_amd64.deb ...
Unpacking slirp4netns (1.2.1-1build2) ...
Setting up docker-buildx-plugin (0.16.2-1~ubuntu.24.04~noble) ...
Setting up containerd.io (1.7.21-1) ...
Created symlink /etc/systemd/system/multi-user.target.wants/containerd.service → /usr/lib/systemd/system/containerd.service.
Setting up docker-compose-plugin (2.29.2-1~ubuntu.24.04~noble) ...
Setting up libltdl7:amd64 (2.4.7-7build1) ...
Setting up docker-ce-cli (5:27.2.0-1~ubuntu.24.04~noble) ...
Setting up libslirp0:amd64 (4.7.0-1ubuntu3) ...
Setting up pigz (2.8-1) ...
Setting up docker-ce-rootless-extras (5:27.2.0-1~ubuntu.24.04~noble) ...
Setting up slirp4netns (1.2.1-1build2) ...
Setting up docker-ce (5:27.2.0-1~ubuntu.24.04~noble) ...
Created symlink /etc/systemd/system/multi-user.target.wants/docker.service → /usr/lib/systemd/system/docker.service.
Created symlink /etc/systemd/system/sockets.target.wants/docker.socket → /usr/lib/systemd/system/docker.socket.
Processing triggers for man-db (2.12.0-4build2) ...
Processing triggers for libc-bin (2.39-0ubuntu8.2) ...
Scanning processes...                                                           
Scanning linux images...                                                        

Running kernel seems to be up-to-date.

No services need to be restarted.

No containers need to be restarted.

No user sessions are running outdated binaries.

No VM guests are running outdated hypervisor (qemu) binaries on this host.
ubuntu@ip-172-31-87-138:~$ docker --version
Docker version 27.2.0, build 3ab4256
ubuntu@ip-172-31-87-138:~$ git clone https://github.com/akhilgit19/Gold_Site_Ecommerce-1.git
Cloning into 'Gold_Site_Ecommerce-1'...
remote: Enumerating objects: 169, done.
remote: Counting objects: 100% (169/169), done.
remote: Compressing objects: 100% (166/166), done.
remote: Total 169 (delta 77), reused 57 (delta 2), pack-reused 0 (from 0)
Receiving objects: 100% (169/169), 1.10 MiB | 31.29 MiB/s, done.
Resolving deltas: 100% (77/77), done.
ubuntu@ip-172-31-87-138:~$ ls
Gold_Site_Ecommerce-1
ubuntu@ip-172-31-87-138:~$ cd Gold_Site_Ecommerce-1
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ cd ..
ubuntu@ip-172-31-87-138:~$ rm -rf Gold_Site_Ecommerce-1 
ubuntu@ip-172-31-87-138:~$ git clone https://github.com/akhilgit19/Gold_Site_Ecommerce-1.git
Cloning into 'Gold_Site_Ecommerce-1'...
remote: Enumerating objects: 172, done.
remote: Counting objects: 100% (172/172), done.
remote: Compressing objects: 100% (169/169), done.
remote: Total 172 (delta 78), reused 57 (delta 2), pack-reused 0 (from 0)
Receiving objects: 100% (172/172), 1.10 MiB | 32.21 MiB/s, done.
Resolving deltas: 100% (78/78), done.
ubuntu@ip-172-31-87-138:~$ ls
Gold_Site_Ecommerce-1
ubuntu@ip-172-31-87-138:~$ cd Gold_Site_Ecommerce-1
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ ls
Git_set_up   README.md       package-lock.json  public  test
Jenkinsfile  golddockerfile  package.json       src     test2023
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ sudo docker build -t react-docker -f golddockerfile .
[+] Building 113.2s (14/14) FINISHED                             docker:default
 => [internal] load build definition from golddockerfile                   0.0s
 => => transferring dockerfile: 617B                                       0.0s
 => WARN: FromAsCasing: 'as' and 'FROM' keywords' casing do not match (li  0.0s
 => [internal] load metadata for docker.io/library/nginx:alpine            0.3s
 => [internal] load metadata for docker.io/library/node:18                 0.3s
 => [internal] load .dockerignore                                          0.0s
 => => transferring context: 2B                                            0.0s
 => [build 1/6] FROM docker.io/library/node:18@sha256:a7ff16657263663c1e  24.7s
 => => resolve docker.io/library/node:18@sha256:a7ff16657263663c1e92ba306  0.0s
 => => sha256:cc722b58258b36bc4d845113d609fea1e2957f12118 2.49kB / 2.49kB  0.0s
 => => sha256:45f07525ada0df5b873def96c54f0fbf2f3b823658f 6.55kB / 6.55kB  0.0s
 => => sha256:3cbbe86a28c2f6b3c3e0e8c6dcfba369e1ea656cf 24.05MB / 24.05MB  0.6s
 => => sha256:a7ff16657263663c1e92ba3060cdbba0e77329a0a4c 6.41kB / 6.41kB  0.0s
 => => sha256:903681d87777d28dc56866a07a2774c3fd5bf65fd 49.55MB / 49.55MB  1.0s
 => => sha256:6ed93aa58a52c9abc1ee472f1ac74b73d3adcccc2 64.14MB / 64.14MB  1.3s
 => => sha256:787c78da43830be6d988d34c7ee091f98d82851 211.24MB / 211.24MB  3.7s
 => => extracting sha256:903681d87777d28dc56866a07a2774c3fd5bf65fd734b24c  5.2s
 => => sha256:a22bad3cc9773638be9a43d84179b40cccaf4e9486a 3.32kB / 3.32kB  1.3s
 => => sha256:d20a60ac17d1dee38a8af42da4f856eb0de0cec97 45.64MB / 45.64MB  2.1s
 => => sha256:2c399ba7c34f7a16e5ba741bce21c63738721cd8dc2 1.25MB / 1.25MB  1.4s
 => => sha256:b5179ca6334f7879a0be737b4340614628d71037568286f 445B / 445B  1.6s
 => => extracting sha256:3cbbe86a28c2f6b3c3e0e8c6dcfba369e1ea656cf8daf69b  0.8s
 => => extracting sha256:6ed93aa58a52c9abc1ee472f1ac74b73d3adcccc2c307444  3.8s
 => => extracting sha256:787c78da43830be6d988d34c7ee091f98d828516ce5478ca  9.3s
 => => extracting sha256:a22bad3cc9773638be9a43d84179b40cccaf4e9486ad5e39  0.0s
 => => extracting sha256:d20a60ac17d1dee38a8af42da4f856eb0de0cec97a9663da  2.9s
 => => extracting sha256:2c399ba7c34f7a16e5ba741bce21c63738721cd8dc2779ca  0.1s
 => => extracting sha256:b5179ca6334f7879a0be737b4340614628d71037568286f0  0.0s
 => [stage-1 1/2] FROM docker.io/library/nginx:alpine@sha256:c04c18adc2a4  4.8s
 => => resolve docker.io/library/nginx:alpine@sha256:c04c18adc2a407740a39  0.0s
 => => sha256:0f0eda053dc5c4c8240f11542cb4d200db6a11d47 11.23kB / 11.23kB  0.0s
 => => sha256:c04c18adc2a407740a397c8407c011fc6c90026a9b6 9.07kB / 9.07kB  0.0s
 => => sha256:0c57fe90551cfd8b7d4d05763c5018607b296cb01f7 2.50kB / 2.50kB  0.0s
 => => sha256:c6a83fedfae6ed8a4f5f7cbb6a7b6f1c1ec3d86fea8 3.62MB / 3.62MB  1.8s
 => => extracting sha256:c6a83fedfae6ed8a4f5f7cbb6a7b6f1c1ec3d86fea8cb9e5  0.6s
 => => sha256:7f5898476db744b7e3d5f25c7533b4285e21cf20256 1.76MB / 1.76MB  2.0s
 => => sha256:45f552c78c312f2b711135f5af71a2eb06e223246d13cae 629B / 629B  2.2s
 => => sha256:62a896bb4a21c26afb24814d77cc345822fd8b03255bb9f 955B / 955B  2.2s
 => => sha256:532b9a30583c1bf82204f3cbc8054882bace1669cc85fdc 393B / 393B  2.2s
 => => sha256:41c49cbde6a69c2861d4443a90e47a59e906386088b 1.21kB / 1.21kB  2.3s
 => => sha256:9da224fdd4124c20879a425f59ee3d7e9aeccf37356 1.40kB / 1.40kB  2.3s
 => => sha256:35b039ba2bc54667ad0fdce04367ea93ed097b050 13.19MB / 13.19MB  2.7s
 => => extracting sha256:7f5898476db744b7e3d5f25c7533b4285e21cf2025610f33  0.2s
 => => extracting sha256:45f552c78c312f2b711135f5af71a2eb06e223246d13cae7  0.0s
 => => extracting sha256:62a896bb4a21c26afb24814d77cc345822fd8b03255bb9f9  0.0s
 => => extracting sha256:532b9a30583c1bf82204f3cbc8054882bace1669cc85fdcb  0.0s
 => => extracting sha256:41c49cbde6a69c2861d4443a90e47a59e906386088b706d3  0.0s
 => => extracting sha256:9da224fdd4124c20879a425f59ee3d7e9aeccf37356692f3  0.0s
 => => extracting sha256:35b039ba2bc54667ad0fdce04367ea93ed097b0506cda323  0.8s
 => [internal] load build context                                          0.3s
 => => transferring context: 3.26MB                                        0.3s
 => [build 2/6] WORKDIR /app                                               1.6s
 => [build 3/6] COPY package*.json ./                                      0.0s
 => [build 4/6] RUN npm install                                           43.9s
 => [build 5/6] COPY . .                                                   0.1s
 => [build 6/6] RUN npm run build                                         40.5s
 => [stage-1 2/2] COPY --from=build /app/build /usr/share/nginx/html       0.1s
 => exporting to image                                                     0.1s
 => => exporting layers                                                    0.0s
 => => writing image sha256:4126ae0b083e9de9e918327d8795aee8198da67735f2c  0.0s
 => => naming to docker.io/library/react-docker                            0.0s

 1 warning found (use docker --debug to expand):
 - FromAsCasing: 'as' and 'FROM' keywords' casing do not match (line 1)
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ sudo docker images
REPOSITORY     TAG       IMAGE ID       CREATED          SIZE
react-docker   latest    4126ae0b083e   48 seconds ago   46MB
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ sudo docker run --name react-docker-container -p 80:80 -d react-docker
c6e6960df872588188f3deb06efd093ae67d0efb60182a37ac6709f168b183d3
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ sudo docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                               NAMES
c6e6960df872   react-docker   "/docker-entrypoint.…"   9 seconds ago   Up 8 seconds   0.0.0.0:80->80/tcp, :::80->80/tcp   react-docker-container
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ 
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ ls
Git_set_up   README.md       package-lock.json  public  test
Jenkinsfile  golddockerfile  package.json       src     test2023
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ cat golddockerfile 
FROM node:18 as build
# Set the working directory in the container
WORKDIR /app
# Copy package.json and package-lock.json from GitHub repository
COPY package*.json ./
# Install dependencies
RUN npm install
#Copy git code to /app directory
COPY . .
# Build the React app
RUN npm run build
#Use Nginx as the Application server

FROM nginx:alpine
# Copy the built React app to Nginx's web server directory
COPY --from=build /app/build /usr/share/nginx/html
# Expose port 80 for the Nginx server
EXPOSE 80
#Start Nginx when the container runs
CMD ["nginx", "-g", "daemon off;"]
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ 

====================================================
Last login: Sat Aug 31 00:30:11 2024 from 49.43.217.48
ubuntu@ip-172-31-87-138:~$ cd  Gold_Site_Ecommerce-1
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ sudo docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                               NAMES
c6e6960df872   react-docker   "/docker-entrypoint.…"   12 minutes ago   Up 12 minutes   0.0.0.0:80->80/tcp, :::80->80/tcp   react-docker-container
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ sudo docker stop c6e
c6e
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$  sudo docker start c6e
c6e
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ sudo docker images
REPOSITORY     TAG       IMAGE ID       CREATED          SIZE
react-docker   latest    4126ae0b083e   15 minutes ago   46MB
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ sudo docker login

USING WEB BASED LOGIN
To sign in with credentials on the command line, use 'docker login -u <username>'

Your one-time device confirmation code is: FJLQ-VXXP
Press ENTER to open your browser or submit your device code here: https://login.docker.com/activate

Waiting for authentication in the browser…
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ sudo docker tag react-docker:latest akhilpagadapoola/react-nginx:latest
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ sudo docker push akhilpagadapoola/react-nginx:latest
The push refers to repository [docker.io/akhilpagadapoola/react-nginx]
0abff83bca00: Pushed 
26d9c9583797: Mounted from library/nginx 
2cdd4bacf827: Mounted from library/nginx 
f3719eb0da5e: Mounted from library/nginx 
9a2d14b22cbe: Mounted from library/nginx 
16f2939def51: Mounted from library/nginx 
b65aff7ee426: Mounted from library/nginx 
c028c01f43bc: Mounted from library/nginx 
78561cef0761: Mounted from library/nginx 
latest: digest: sha256:dab90f89272efc8c7d765fe435dd7bafb782cbc457355d51347bc28b23595328 size: 2200
ubuntu@ip-172-31-87-138:~/Gold_Site_Ecommerce-1$ 
==================================================

Build and Deploy series: The Series here does not focus on individual tools but focuses more on how different DevOps tools are connected to each other

The series focuses mainly on Build and Deploy and also may not follow best practises of DevOps but we will speak about the best practises and places where in our project to be improved to make it a secured setup.



##Note: The video above here demonstrates blog in Telugu(has english subtitles), recommend watching the video in separate tab and blog in seperate tab for easy practise.

click here to navigate to YouTube

We recommend access the blog through your laptop/Computer for better visibility.The coloured texts are links that can help you navigate to particular topic and each code snippet has copy button appears when hovered, This blog particularly designed with screenshots to help you practise and gain confidence on DevOps world##

What Can you expect from Blog:
Installation of Docker
How to build Docker images using Docker file for React Application                    
How to Deploy Docker images in Docker container
How to host Website on GoDaddy Domain when application is running on AWS EC2
Configuration to be used for this project:
Image: Ubuntu Server 24.04

Type: t3.micro

use  Type: t3.large, if you are planning to run ansible on the same instance, cost charges may incurr

#Note: AWS Free Tier is only for 750 Hours per year, so make sure you stop instance once you are done with the project

Now let us Dockerize our React application,We will install docker on our AWS EC2
cat /etc/os-release
Copy

Now let us install docker from official documentation
the below command uninstalls existing docker and conflicting packages
for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
Copy
To install docker prerequisties
# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
Copy
Now lets install docker latest version

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
Copy
verify docker installation

docker --version
Copy



Now before Building docker file, let us recap what we have done in Part-1 Project

step1: We have installed Git
step2: We have cloned Git repository
step3: We have installed nodejs
step4: We have installed npm
step5: We have build our react code using "npm run build" command
step6: We have installed nginx and we have copied our build folder path to nginx path

We will follow the same steps here, but we will instruct docker to do the steps and build as an image using dockerfile

Dockerfile is a text file with set of instructions and Layers are used to build a docker image

Now let start by cloning our git repository
git clone https://github.com/Hari0o/Gold_Site_Ecommerce.git
Copy

Now navigate inside our directory
cd Gold_Site_Ecommerce/
Copy

      
Now write docker file inside this directory.Give default name as Dockerfile

In our case, we already created dockerfile inside our repo
FROM node:18 as build
# Set the working directory in the container
WORKDIR /app
# Copy package.json and package-lock.json from GitHub repository
COPY package*.json ./
# Install dependencies
RUN npm install
#Copy git code to /app directory
COPY . .
# Build the React app
RUN npm run build
# Use Nginx as the Application server

FROM nginx:alpine
# Copy the built React app to Nginx's web server directory
COPY --from=build /app/build /usr/share/nginx/html
# Expose port 80 for the Nginx server
EXPOSE 80
#Start Nginx when the container runs
CMD ["nginx", "-g", "daemon off;"]
Copy
note:You can use the above docker file for your react project as well
Build of React Project using Docker(Docker images)
we can now build our docker image using docker build command

since we named our dockerfile as golddockerfile instead of leaving it as default,we need to specify the docker file name to docker else docker searches for Dockerfile by default

sudo docker build -t react-docker -f golddockerfile .
Copy



In the above command, -t flag stands for tag , we are tagging name react-docker to our image and -f stands for file, we are specifying docker that dockerfile here to build is golddockerfile

it might take some time in building docker image,once image is created,check docker images

sudo docker images
Copy



#note: Build would take quite some time

Build has been completed successfully

Deployment of React Project(Docker Container)
Since the image is already created, we will use the same image to deploy in our container
We will use the command
sudo docker run --name react-docker-container -p 80:80 -d react-docker
Copy



In the above command --name flag is the to give container a name, in our case ,we named it as react-docker-container and -p is the port flag it stands like hostport:containerport . In our case since aws is our host, we opened hostport 80 for our domain to listen and containerport is the port of container,in our docker file, as you can see,we exposed port 80. so we will use that here and -d stands for dettached mode and react-docker is the name of the image that we built

Now verify our docker containers by command
sudo docker ps
Copy



You will be able to find running containers

Our Deployment is successful

Now our deployment has completed, we need to make few more changes for our domain to be visible

Domain visibility
Go for AWS EC2, security groups and In inbound rules allow port 80,as our nginx listens on port 80


post that copy AWS EC2 public IP,

Log into your GoDaddy Console and My Products >Domain > DNS.In A records, paste the AWS EC2 public IP

Now we will be able to access our domain in which we can see our React application that we have built and deployed

AWS public IP changes once the system is stopped and started back. to avoid this, we can use AWS Elastic IP with some cost charges
