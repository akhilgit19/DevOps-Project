
Build of React Application
##Note: Bash scripts must be saved with .sh and first line to be #!/bin/bash except first line "#" is considered to be a comment###
 Now our goal here is to Build docker image in AWS EC2 server and push it to Docker hub

 we will write a simple bash script to automate our process

 we will be deleting our existing images to save some space, generally this is not recommended, i am running this as  i don't want to get space issue for docker images to be piled up whenever we run build

we can pull the existing repository, but in this, i am deleting and re-creating git to update latest repository

i am running the script as i can use the same script to deploy in new servers if needed

code:

#!/bin/bash
sudo docker rmi -f $(sudo docker images -q) ##this is not recommned step, i am deleting existing images to save space
sudo rm -r gold ## these steps are not recommened instead you can modify script as shown below
sudo mkdir gold
cd gold/
sudo git clone https://github.com/Hari0o/Gold_Site_Ecommerce.git
cd Gold_Site_Ecommerce/
sudo docker build -t react-nginx -f golddockerfile .
sudo docker tag react-nginx:latest reactdemo/react-nginx:latest ##make sure you did docker login
sudo docker push reactdemo/react-nginx:latest

##recommended script###
#!/bin/bash
#cd gold/Gold_Site_Ecommerce
#sudo git pull
#sudo docker build -t react-nginx -f goldockerfile .
#sudo docker tag react-nginx:latest reactdemo/react-nginx:latest ##make sure you did docker login
#sudo docker push reactdemo/react-nginx:latest


save the script in file that ends with .sh, in our case, we saved it as build.sh

As we see, build.sh folder has root as owner



Now give permissions to the file, since we will be running our scripts from ubuntu, let us change ownership from root to ubuntu by command
sudo chown ubuntu build.sh
Copy

Now let us give execute permissions for script to run
 sudo chmod 744 build.sh
Copy


Now let us run the script if you are in the same path of script you can run ./build.sh,if you are in different path use full path of script like /home/ubuntu/build.sh and In ./build.sh "." represents present working directory
/home/ubuntu/build.sh
Copy


once script is run, you can verify latest images by sudo docker images

sudo docker images
Copy


Alternately, you can check your docker hub account

Verify latest push time,this shows our Build has been successful and pushed to docker image.

Now to avoid confusion, let us rename our AWS-EC2 server in which we have built our docker images to BuildServer and and our server in which we are running kubernetes to DeployServer



Deployment of React Application

Since we have already made setup as Part-3, we will restart pods, so that when pod is up,
it fetches latest image from Dockerhub.

We will write a Bash script inside our Deploy server to restart pods
Since we have placed pods in Deployment, Deleting existing pods will bring up new pods automatically


#!/bin/bash
pods_id=$(microk8s kubectl get pods -n react-nginx |grep react |awk {'print $1'})
microk8s kubectl delete pod $pods_id -n react-nginx 
Copy
Change the namespace to the name you have given according to last project

in the above script pods_id is variable and it helps to get pod_ids in deployment
second command deletes the existing pods, this lets kubernetes deployment to bring up new pods

change ownership of our script file to ubuntu or change it to any user you want to run script with
sudo chown ubuntu deploy.sh
Copy



Now give execute permissions for file to run
sudo chmod 744 deploy.sh
Copy



if you are in same directory as that of script, we can simply run the command by
./deploy.sh
Copy


Now check deployment if pods are restarted or not by command
since we are in microk8s run alias command that is specified in part-3,

kubectl get pods -n react-nginx
Copy


Our Deployment is successful

Note: Helm Charts are recommended way to Deploy kubernetes,to put in simple words Helm charts are like package of your complete kubernetes, It will re-install our kubernetes components like ingress service,deployment and all that are actually required to make our application up.We will talk about Helm Charts in upcoming projects

I have only used restart pod to show that pod restart would fetch image from container registry.

This Bash script would not help us if we have change in service or ingress file. either we can use commands to update these components individually else we can drop all the components into helm charts and then updating helm with single command

In this complete series, i will be using only the pod restart method as an deployment part



Domain visibility

Go for AWS EC2, security groups and In inbound rules allow port 80, as our nginx listens on port 80




==============================================
ubuntu@ip-172-31-87-138:~$ ls
Gold_Site_Ecommerce-1
ubuntu@ip-172-31-87-138:~$ sudo vi build.sh
ubuntu@ip-172-31-87-138:~$ cat build.sh
#!/bin/bash
sudo docker rmi -f $(sudo docker images -q) ##this is not recommned step, i am deleting existing images to save space
sudo rm -r gold ## these steps are not recommened instead you can modify script as shown below
sudo mkdir gold
cd gold/
sudo git clone https://github.com/akhilgit19/Gold_Site_Ecommerce-1.git
cd Gold_Site_Ecommerce-1/
sudo docker build -t react-nginx-image -f golddockerfile .
sudo docker tag react-nginx-image:latest akhilpagadapoola/react-nginx:latest ##make sure you did docker login
sudo docker push akhilpagadapoola/react-nginx:latest

##recommended script###
#!/bin/bash
#cd gold/Gold_Site_Ecommerce
#sudo git pull
#sudo docker build -t react-nginx -f goldockerfile .
#sudo docker tag react-nginx:latest reactdemo/react-nginx:latest ##make sure you did docker login
#sudo docker push reactdemo/react-nginx:latest
ubuntu@ip-172-31-87-138:~$ sudo chown ubuntu build.sh
ubuntu@ip-172-31-87-138:~$  sudo chmod 744 build.sh
ubuntu@ip-172-31-87-138:~$ ls
Gold_Site_Ecommerce-1  build.sh
ubuntu@ip-172-31-87-138:~$ ./build.sh
Error response from daemon: conflict: unable to delete 4126ae0b083e (cannot be forced) - image is being used by running container c6e6960df872
Error response from daemon: conflict: unable to delete 4126ae0b083e (cannot be forced) - image is being used by running container c6e6960df872
rm: cannot remove 'gold': No such file or directory
Cloning into 'Gold_Site_Ecommerce-1'...
remote: Enumerating objects: 172, done.
remote: Counting objects: 100% (172/172), done.
remote: Compressing objects: 100% (169/169), done.
remote: Total 172 (delta 78), reused 57 (delta 2), pack-reused 0 (from 0)
Receiving objects: 100% (172/172), 1.10 MiB | 33.16 MiB/s, done.
Resolving deltas: 100% (78/78), done.
[+] Building 85.4s (16/16) FINISHED                                                                                        docker:default
 => [internal] load build definition from golddockerfile                                                                             0.0s
 => => transferring dockerfile: 617B                                                                                                 0.0s
 => WARN: FromAsCasing: 'as' and 'FROM' keywords' casing do not match (line 1)                                                       0.0s
 => [internal] load metadata for docker.io/library/nginx:alpine                                                                      0.1s
 => [internal] load metadata for docker.io/library/node:18                                                                           0.1s
 => [auth] library/nginx:pull token for registry-1.docker.io                                                                         0.0s
 => [auth] library/node:pull token for registry-1.docker.io                                                                          0.0s
 => [internal] load .dockerignore                                                                                                    0.0s
 => => transferring context: 2B                                                                                                      0.0s
 => [build 1/6] FROM docker.io/library/node:18@sha256:a7ff16657263663c1e92ba3060cdbba0e77329a0a4cb3c27bbbbe90c6e20bd87               0.0s
 => CACHED [stage-1 1/2] FROM docker.io/library/nginx:alpine@sha256:c04c18adc2a407740a397c8407c011fc6c90026a9b65cceddef7ae548436015  0.0s
 => [internal] load build context                                                                                                    0.1s
 => => transferring context: 3.26MB                                                                                                  0.1s
 => CACHED [build 2/6] WORKDIR /app                                                                                                  0.0s
 => [build 3/6] COPY package*.json ./                                                                                                0.0s
 => [build 4/6] RUN npm install                                                                                                     42.9s
 => [build 5/6] COPY . .                                                                                                             0.1s 
 => [build 6/6] RUN npm run build                                                                                                   39.9s 
 => [stage-1 2/2] COPY --from=build /app/build /usr/share/nginx/html                                                                 0.0s 
 => exporting to image                                                                                                               0.0s 
 => => exporting layers                                                                                                              0.0s 
 => => writing image sha256:d7fa07b06b0a617ed90a16a349070d2dae31b2e8228b4fb76fbe349ebf2c191c                                         0.0s 
 => => naming to docker.io/library/react-nginx-image                                                                                 0.0s

 1 warning found (use docker --debug to expand):
 - FromAsCasing: 'as' and 'FROM' keywords' casing do not match (line 1)
The push refers to repository [docker.io/akhilpagadapoola/react-nginx]
44c86680c664: Pushed 
26d9c9583797: Layer already exists 
2cdd4bacf827: Layer already exists 
f3719eb0da5e: Layer already exists 
9a2d14b22cbe: Layer already exists 
16f2939def51: Layer already exists 
b65aff7ee426: Layer already exists 
c028c01f43bc: Layer already exists 
78561cef0761: Layer already exists 
latest: digest: sha256:6fec2151ba9e13ed891175dcf10464011903b67bf430c6aaba76f757ad09e892 size: 2200
ubuntu@ip-172-31-87-138:~$ client_loop: send disconnect: Broken pipe
akhilpagadapoola@Akhils-MacBook-Air Docker_react_nginx_aws_keypair % ssh -i "docker-react-nginx-aws.pem" ubuntu@ec2-34-207-157-230.compute-1.amazonaws.com
Welcome to Ubuntu 24.04 LTS (GNU/Linux 6.8.0-1012-aws x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/pro

 System information as of Sat Aug 31 01:48:42 UTC 2024

  System load:  0.0               Temperature:           -273.1 C
  Usage of /:   70.7% of 6.71GB   Processes:             124
  Memory usage: 26%               Users logged in:       1
  Swap usage:   0%                IPv4 address for ens5: 172.31.87.138


Expanded Security Maintenance for Applications is not enabled.

105 updates can be applied immediately.
27 of these updates are standard security updates.
To see these additional updates run: apt list --upgradable

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


Last login: Sat Aug 31 01:35:49 2024 from 49.43.217.48
ubuntu@ip-172-31-87-138:~$ sudo docker images
REPOSITORY                     TAG       IMAGE ID       CREATED             SIZE
react-nginx-image              latest    d7fa07b06b0a   7 minutes ago       46MB
akhilpagadapoola/react-nginx   latest    d7fa07b06b0a   7 minutes ago       46MB
react-docker                   latest    4126ae0b083e   About an hour ago   46MB
akhilpagadapoola/react-nginx   <none>    4126ae0b083e   About an hour ago   46MB
ubuntu@ip-172-31-87-138:~$ 


In Deploy server:

ubuntu@ip-172-31-86-66:~$ ls
deployment.yaml  react-ingress.yaml  react-service.yaml  snap
ubuntu@ip-172-31-86-66:~$ sudo vi deploy.sh
ubuntu@ip-172-31-86-66:~$ cat deploy.sh
#!/bin/bash
pods_id=$(microk8s kubectl get pods -n react-nginx-namespace |grep react |awk {'print $1'})
microk8s kubectl delete pod $pods_id -n react-nginx-namespace 
ubuntu@ip-172-31-86-66:~$ sudo chown ubuntu deploy.sh
ubuntu@ip-172-31-86-66:~$ sudo chmod 744 deploy.sh
ubuntu@ip-172-31-86-66:~$ ./deploy.sh
pod "react-deployment-959dfb7cb-4hdb8" deleted
pod "react-deployment-959dfb7cb-bg7v5" deleted

ubuntu@ip-172-31-86-66:~$ microk8s kubectl get pods -n react-nginx--namespace
No resources found in react-nginx--namespace namespace.
ubuntu@ip-172-31-86-66:~$ microk8s kubectl get pods -n react-nginx-namespace
NAME                               READY   STATUS    RESTARTS   AGE
react-deployment-959dfb7cb-t5knx   1/1     Running   0          56s
react-deployment-959dfb7cb-t7txr   1/1     Running   0          56s
ubuntu@ip-172-31-86-66:~$ 
